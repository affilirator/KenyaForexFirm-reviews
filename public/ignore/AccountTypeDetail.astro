---
// src/components/AccountTypeDetail.astro
//import type { CollectionConfig } from 'payload/types'; // Using payload/types for type inference

interface AccountType {
  id: string;
  title: string;
  type: 'stp' | 'ecn' | 'dma';
  shortDescription: string;
  description: any; // Using 'any' for richText for simplicity, but you can define a more specific type
  keyFeatures: Array<{ feature: string }>;
  revenueModel: string;
  spreads: string;
  liquiditySource: string;
  executionSpeed: string;
  dealingDeskPresence: 'ndd' | 'dd';
  transparencyLevel: 'high' | 'very_high' | 'full';
  suitableFor: Array<{ targetAudience: string }>;
  pros: Array<{ advantage: string }>;
  cons: Array<{ disadvantage: string }>;
  comparisonNotes: any; // Using 'any' for richText
}

interface Props {
  account: AccountType;
}

const { account } = Astro.props;

const getTypeColor = (type: string) => {
  switch (type) {
    case 'stp':
      return 'bg-blue-100 text-blue-800';
    case 'ecn':
      return 'bg-green-100 text-green-800';
    case 'dma':
      return 'bg-purple-100 text-purple-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

const getDealingDeskLabel = (presence: 'ndd' | 'dd') => {
  return presence === 'ndd' ? 'No Dealing Desk' : 'Dealing Desk';
};

const getTransparencyLabel = (level: 'high' | 'very_high' | 'full') => {
  switch (level) {
    case 'high': return 'High';
    case 'very_high': return 'Very High';
    case 'full': return 'Full Market Transparency';
    default: return 'N/A';
  }
};
---

<article class="bg-white rounded-lg shadow-xl p-8 lg:p-10 max-w-4xl mx-auto">
  <div class="mb-8 border-b pb-6 border-gray-200 flex flex-col md:flex-row justify-between items-start md:items-center">
    <h1 class="text-4xl font-extrabold text-gray-900 mb-4 md:mb-0">
      {account.title}
    </h1>
    <span class={`px-4 py-2 rounded-full text-sm font-bold ${getTypeColor(account.type)}`}>
      {account.type.toUpperCase()}
    </span>
  </div>

  <section class="mb-8">
    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Overview</h2>
    <p class="text-lg text-gray-700 leading-relaxed mb-6">
      {account.shortDescription}
    </p>
    <div class="prose max-w-none">
      {/* Assuming description is rendered from richText, you might need a custom component for this */}
      {/* For Payload's default richText, you might use 'raw' html or a renderer library */}
      <Fragment set:html={account.description?.html || ''} />
    </div>
  </section>

  <section class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
    <div>
      <h3 class="text-xl font-semibold text-gray-800 mb-3">Key Characteristics</h3>
      <ul class="space-y-3 text-gray-700">
        <li><strong>Revenue Model:</strong> {account.revenueModel}</li>
        <li><strong>Typical Spreads:</strong> {account.spreads}</li>
        <li><strong>Liquidity Source:</strong> {account.liquiditySource}</li>
        <li><strong>Execution Speed:</strong> {account.executionSpeed}</li>
        <li><strong>Dealing Desk:</strong> {getDealingDeskLabel(account.dealingDeskPresence)}</li>
        <li><strong>Transparency:</strong> {getTransparencyLabel(account.transparencyLevel)}</li>
      </ul>
    </div>
    <div>
      <h3 class="text-xl font-semibold text-gray-800 mb-3">Key Features</h3>
      <ul class="list-disc list-inside space-y-2 text-gray-700">
        {account.keyFeatures.map((item) => (
          <li>{item.feature}</li>
        ))}
      </ul>
    </div>
  </section>

  <section class="mb-8">
    <h3 class="text-xl font-semibold text-gray-800 mb-3">Who is it Suitable For?</h3>
    <ul class="list-disc list-inside space-y-2 text-gray-700">
      {account.suitableFor.map((item) => (
        <li>{item.targetAudience}</li>
      ))}
    </ul>
  </section>

  <section class="mb-8">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div>
        <h3 class="text-xl font-semibold text-gray-800 mb-3 text-green-700">Advantages</h3>
        {account.pros && account.pros.length > 0 ? (
          <ul class="list-disc list-inside space-y-2 text-gray-700">
            {account.pros.map((item) => (
              <li>{item.advantage}</li>
            ))}
          </ul>
        ) : (
          <p class="text-gray-500 italic">No specific advantages listed.</p>
        )}
      </div>
      <div>
        <h3 class="text-xl font-semibold text-gray-800 mb-3 text-red-700">Disadvantages</h3>
        {account.cons && account.cons.length > 0 ? (
          <ul class="list-disc list-inside space-y-2 text-gray-700">
            {account.cons.map((item) => (
              <li>{item.disadvantage}</li>
            ))}
          </ul>
        ) : (
          <p class="text-gray-500 italic">No specific disadvantages listed.</p>
        )}
      </div>
    </div>
  </section>

  {account.comparisonNotes && account.comparisonNotes.html && (
    <section class="bg-gray-50 p-6 rounded-lg border border-gray-200 mt-8">
      <h3 class="text-xl font-semibold text-gray-800 mb-3">Comparison Notes</h3>
      <div class="prose max-w-none text-gray-700">
        <Fragment set:html={account.comparisonNotes.html} />
      </div>
    </section>
  )}
</article>