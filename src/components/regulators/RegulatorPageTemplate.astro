---
/**
 * RegulatorPageTemplate.astro - Reusable template for regulator pages
 */
import type { AsicRegulationGlobal } from '../../types/asicRegulation';
import Layout from '../../layouts/BaseLayout.astro';
import { 
  RegulatorHero, 
  RegulatorSection, 
  RegulatorFAQ, 
  RegulatorConclusion, 
  RegulatorRelatedContent,
  RegulatorRequirements,
  RegulatorBenefits,
  RegulatorBrokers,
  TopRegulatedBrokers
} from '../regulators';
import ErrorDisplay from '../common/ErrorDisplay.astro';
import RegulatorCard from './RegCardTwo';

interface Props {
  regulatorData: AsicRegulationGlobal | null;
  error: any;
}

const { regulatorData, error } = Astro.props;
const name = 'Australian Securities Investment Company'
const shortName = 'ASIC'
const description = regulatorData?.aboutRegulator
const country = 'Australia'
const region = 'Oceania'
const established = regulatorData?.aboutRegulator.establishedDate
const logo = regulatorData?.hero.heroImage.url
const trustScore = 90
const slug = 'asic-regulation'
const brokerArray = regulatorData?.relationships.regulatedBrokers


// Set page metadata
const pageTitle = regulatorData?.meta?.title || 'Forex Regulator Information';
const pageDescription = regulatorData?.meta?.description || 'Learn about this financial regulator';
---

<Layout title={pageTitle} description={pageDescription}>
  <script src="/src/scripts/regulatorPage.js"></script>
  <script src="/src/scripts/regulatorBrokerCards.js"></script>
  
  {error && (
    <ErrorDisplay 
      title="Error Loading Regulator Data"
      message="We encountered an error while loading the regulator information. Please try again later."
      backLink={{ text: "View All Regulators", url: "/regulators" }}
    />
  )}
  <RegulatorCard
    name={name}
    shortName={shortName}
    description={description}
    country={country}
    region={region}
    established={established}
    logo={logo}
    trustScore={trustScore}
    slug={slug}
    client:load
  />

  {regulatorData && (
    <>
      <!-- Hero Section -->
      <RegulatorHero
        heading={regulatorData.hero.heading}
        subheading={regulatorData.hero.subheading}
        introduction={regulatorData.hero.introduction}
        heroImage={regulatorData.hero.heroImage}
        showTableOfContents={regulatorData.hero.tableOfContents}
      />

      <!-- About Regulator Section -->
      {regulatorData.aboutRegulator && (
        <RegulatorSection
          sectionTitle={regulatorData.aboutRegulator.sectionTitle}
          sectionId={regulatorData.aboutRegulator.sectionId}
          content={regulatorData.aboutRegulator.content}
          featuredImage={regulatorData.aboutRegulator.regulatorLogo}
          imagePosition="right"
        />
      )}
      
      <!-- Top Regulated Brokers Section -->
      {regulatorData.aboutRegulator.officialWebsite && shortName && (
        <TopRegulatedBrokers
          regulatorWebsite={regulatorData.aboutRegulator.officialWebsite}
          regulatorName={shortName}
          sectionId="top-regulated-brokers"
        />
      )}

      <!-- Regulations Section -->
      {regulatorData.regulations && (
        <RegulatorSection
          sectionTitle={regulatorData.regulations.sectionTitle}
          sectionId={regulatorData.regulations.sectionId}
          content={regulatorData.regulations.introduction}
          keyPoints={regulatorData.regulations.regulationDetails?.map(detail => ({
            point: detail.title + ': ' + detail.description
          }))}
        />
      )}

      <!-- Broker Requirements Section -->
      {regulatorData.brokerRequirements && (
        <RegulatorRequirements
          sectionTitle={regulatorData.brokerRequirements.sectionTitle}
          sectionId={regulatorData.brokerRequirements.sectionId}
          content={regulatorData.brokerRequirements.content}
          capitalRequirements={regulatorData.brokerRequirements.capitalRequirements}
          clientMoneyProtection={regulatorData.brokerRequirements.clientMoneyProtection}
          leverageLimits={{
            retailClients: regulatorData.brokerRequirements.leverageLimits?.retailClients || 'N/A',
            professionalClients: regulatorData.brokerRequirements.leverageLimits?.retailClients || 'Varies',
            details: undefined
          }}
        />
      )}

      <!-- Benefits and Protections Section -->
      {regulatorData.benefitsProtections && (
        <RegulatorBenefits
          sectionTitle={regulatorData.benefitsProtections.sectionTitle}
          sectionId={regulatorData.benefitsProtections.sectionId}
          content={regulatorData.benefitsProtections.content}
          benefitsList={regulatorData.benefitsProtections.benefitsList?.map(benefit => ({
            title: benefit.title,
            description: benefit.details
          }))}
        />
      )}

      <!-- FAQ Section -->
      {regulatorData.faq && regulatorData.faq.faqItems?.length > 0 && (
        <RegulatorFAQ
          sectionTitle={regulatorData.faq.sectionTitle}
          sectionId={regulatorData.faq.sectionId}
          faqItems={regulatorData.faq.faqItems}
        />
      )}

      <!-- Conclusion Section -->
      {regulatorData.conclusion && (
        <RegulatorConclusion
          sectionTitle={regulatorData.conclusion.sectionTitle}
          sectionId={regulatorData.conclusion.sectionId}
          content={regulatorData.conclusion.content}
        />
      )}

      <!-- Regulated Brokers Section -->
      {regulatorData.relationships?.regulatedBrokers && regulatorData.relationships.regulatedBrokers.length > 0 && (
        <RegulatorBrokers
          sectionTitle={`${regulatorData.hero.heading.split(' ')[0]} Regulated Brokers`}
          sectionId="regulated-brokers"
          brokers={regulatorData.relationships.regulatedBrokers}
        />
      )}

      <!-- Related Content -->
      {regulatorData.relatedContent && regulatorData.relatedContent.articles && regulatorData.relatedContent.articles.length > 0 && (
        <RegulatorRelatedContent
          sectionTitle={regulatorData.relatedContent.sectionTitle}
          articles={regulatorData.relatedContent.articles}
        />
      )}
    </>
  )}
</Layout>