---
// RegulatorHero.astro - Hero section for regulator pages
import RichTextRenderer from './RichTextRenderer.astro';

interface Props {
  heading: string;
  subheading?: string;
  introduction: any; // Rich text content
  heroImage?: {
    url: string;
    alt: string;
  };
  showTableOfContents?: boolean;
}

const { 
  heading, 
  subheading, 
  introduction, 
  heroImage, 
  showTableOfContents = true 
} = Astro.props;
---

<section class="bg-gradient-to-r from-blue-50 to-indigo-50 py-12 px-4 sm:px-6 lg:px-8">
  <div class="max-w-7xl mx-auto">
    <div class="flex flex-col md:flex-row gap-8 items-center">
      <div class={`${heroImage ? 'md:w-3/5' : 'w-full'} space-y-6`}>
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 leading-tight">
          {heading}
        </h1>
        
        {subheading && (
          <p class="text-xl md:text-2xl text-gray-600">
            {subheading}
          </p>
        )}
        
        <div class="prose prose-blue max-w-none">
          <RichTextRenderer content={introduction} />
        </div>
      </div>
      
      {heroImage && (
        <div class="md:w-2/5">
          <img 
            src={heroImage.url} 
            alt={heroImage.alt || 'Regulator hero image'} 
            class="rounded-lg shadow-lg w-full h-auto object-cover"
          />
        </div>
      )}
    </div>
    
    {showTableOfContents && (
      <div class="mt-12 bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Table of Contents</h2>
        <div class="toc-container">
          <!-- Table of contents will be populated by JavaScript -->
          <div id="table-of-contents" class="space-y-2"></div>
        </div>
      </div>
    )}
  </div>
</section>

<script>
  // Generate table of contents from section headings
  document.addEventListener('DOMContentLoaded', () => {
    const tocContainer = document.getElementById('table-of-contents');
    if (!tocContainer) return;
    
    const headings = document.querySelectorAll('h2[id], h3[id]');
    const toc = [];
    
    headings.forEach((heading) => {
      const id = heading.getAttribute('id');
      const text = heading.textContent;
      const level = heading.tagName === 'H2' ? 'toc-h2' : 'toc-h3';
      
      if (id && text) {
        toc.push(`
          <a href="#${id}" class="${level} block hover:text-blue-600 transition-colors ${
            level === 'toc-h3' ? 'pl-4 text-sm' : 'font-medium'
          }">
            ${text}
          </a>
        `);
      }
    });
    
    if (toc.length > 0) {
      tocContainer.innerHTML = toc.join('');
    } else {
      tocContainer.innerHTML = '<p class="text-gray-500">No sections available</p>';
    }
  });
</script>