---
// RegulatorHero.astro - Hero section for regulator pages
import RichTextRenderer from './RichTextRenderer.astro';

interface Props {
  heading: string;
  subheading?: string;
  introduction: any; // Rich text content
  heroImage?: {
    url: string;
    alt: string;
  };
  showTableOfContents?: boolean;
}

const { 
  heading, 
  subheading, 
  introduction, 
  heroImage, 
  showTableOfContents = true 
} = Astro.props;
---

<section class="bg-gradient-to-br from-neutral-100 via-neutral-100 to-primary-400/20 py-20 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
  <div class="absolute inset-0 bg-cyber-grid bg-[length:30px_30px] opacity-30"></div>
  <div class="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-primary-500 via-accent-500 to-primary-500"></div>
  <div class="absolute inset-0 bg-[radial-gradient(circle_at_top_right,rgba(56,189,248,0.15),transparent_50%)]">
  </div>
  <div class="max-w-7xl mx-auto relative z-10">
    <div class="flex flex-col md:flex-row gap-12 items-center">
      <div class={`${heroImage ? 'md:w-3/5' : 'w-full'} space-y-7`}>
        <div class="inline-block">
          <span class="bg-primary-500/10 text-primary-600 px-3 py-1 rounded-full text-sm font-medium border border-primary-500/20 inline-flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
            </svg>
            Regulatory Information
          </span>
        </div>
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-neutral-900 leading-tight font-display tracking-tight">
          <span class="relative inline-block">
            <span class="relative z-10">{heading}</span>
            <span class="absolute bottom-2 left-0 w-full h-3 bg-primary-400/20 -z-10 transform -rotate-1"></span>
          </span>
        </h1>
        
        {subheading && (
          <p class="text-xl md:text-2xl text-neutral-700 font-serif leading-relaxed">
            {subheading}
          </p>
        )}
        
        <div class="prose prose-lg max-w-none text-neutral-800">
          <RichTextRenderer content={introduction} />
        </div>
      </div>
      
      {heroImage && (
        <div class="md:w-2/5 relative group">
          <div class="absolute -inset-1 bg-gradient-to-r from-primary-500 to-accent-500 rounded-xl blur opacity-30 group-hover:opacity-40 transition-opacity duration-300"></div>
          <div class="absolute -inset-0.5 bg-white rounded-xl"></div>
          <img 
            src={heroImage.url} 
            alt={heroImage.alt || 'Regulator hero image'} 
            class="relative rounded-lg shadow-xl w-full h-auto object-cover border border-neutral-200 group-hover:scale-[1.01] transition-transform duration-300 z-10"
          />
          <div class="absolute -bottom-3 -right-3 w-24 h-24 bg-gradient-to-br from-primary-500 to-accent-500 rounded-full opacity-20 blur-xl"></div>
        </div>
      )}
    </div>
    
    {showTableOfContents && (
      <div class="mt-16 bg-white/90 backdrop-blur-md rounded-xl shadow-lg p-7 border border-neutral-200 hover:border-primary-500/30 transition-colors duration-300 relative overflow-hidden">
        <div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-primary-500 to-accent-500"></div>
        <div class="absolute inset-0 bg-[radial-gradient(circle_at_bottom_right,rgba(56,189,248,0.05),transparent_60%)]"></div>
        <h2 class="text-xl font-semibold mb-5 text-neutral-900 font-display flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-primary-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
          </svg>
          Table of Contents
        </h2>
        <div class="toc-container relative z-10">
          <!-- Table of contents will be populated by JavaScript -->
          <div id="table-of-contents" class="space-y-2.5"></div>
        </div>
      </div>
    )}
  </div>
</section>

<script>
  // Generate table of contents from section headings
  document.addEventListener('DOMContentLoaded', () => {
    const tocContainer = document.getElementById('table-of-contents');
    if (!tocContainer) return;
    
    const headings = document.querySelectorAll('h2[id], h3[id]');
    const toc = [];
    
    headings.forEach((heading) => {
      const id = heading.getAttribute('id');
      const text = heading.textContent;
      const level = heading.tagName === 'H2' ? 'toc-h2' : 'toc-h3';
      
      if (id && text) {
        toc.push(`
          <a href="#${id}" class="${level} block hover:text-primary-600 transition-colors ${
            level === 'toc-h3' ? 'pl-5 text-sm border-l border-neutral-200 ml-2 py-0.5' : 'font-medium flex items-center'
          }">
            ${level === 'toc-h2' ? '<span class="w-1.5 h-1.5 rounded-full bg-primary-500 mr-2 flex-shrink-0"></span>' : ''}
            ${text}
          </a>
        `);
      }
    });
    
    if (toc.length > 0) {
      tocContainer.innerHTML = toc.join('');
    } else {
      tocContainer.innerHTML = '<p class="text-neutral-500 italic">No sections available</p>';
    }
  });
</script>

<script>
  // Generate table of contents from section headings
  document.addEventListener('DOMContentLoaded', () => {
    const tocContainer = document.getElementById('table-of-contents');
    if (!tocContainer) return;
    
    const headings = document.querySelectorAll('h2[id], h3[id]');
    const toc = [];
    
    headings.forEach((heading) => {
      const id = heading.getAttribute('id');
      const text = heading.textContent;
      const level = heading.tagName === 'H2' ? 'toc-h2' : 'toc-h3';
      
      if (id && text) {
        toc.push(`
          <a href="#${id}" class="${level} block hover:text-blue-600 transition-colors ${
            level === 'toc-h3' ? 'pl-4 text-sm' : 'font-medium'
          }">
            ${text}
          </a>
        `);
      }
    });
    
    if (toc.length > 0) {
      tocContainer.innerHTML = toc.join('');
    } else {
      tocContainer.innerHTML = '<p class="text-gray-500">No sections available</p>';
    }
  });
</script>