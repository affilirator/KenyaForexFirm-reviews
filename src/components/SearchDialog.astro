---
// Search Dialog Component
---

<div id="search-dialog" class="fixed inset-0 z-50 hidden">
  <div class="fixed inset-0 bg-black/50 backdrop-blur-sm" id="search-overlay"></div>
  <div class="fixed inset-x-4 top-20 mx-auto max-w-2xl">
    <div class="bg-neutral-900 rounded-lg border border-neutral-700 shadow-xl">
      <div class="p-4">
        <div class="relative">
          <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <input
            type="text"
            placeholder="Search brokers, reviews, guides..."
            class="w-full pl-10 pr-4 py-3 bg-neutral-800 border border-neutral-600 rounded-lg text-white placeholder-neutral-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            id="search-input"
          />
          <button
            type="button"
            class="absolute right-3 top-1/2 transform -translate-y-1/2 text-neutral-400 hover:text-white"
            id="close-search"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="search-results" class="mt-4 max-h-96 overflow-y-auto hidden">
          <div class="text-sm text-neutral-400 mb-2">Search results</div>
          <div id="results-list"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const searchDialog = document.getElementById('search-dialog');
  const searchInput = document.getElementById('search-input');
  const searchOverlay = document.getElementById('search-overlay');
  const closeSearch = document.getElementById('close-search');
  const searchResults = document.getElementById('search-results');
  const resultsList = document.getElementById('results-list');

  let searchData: any[] = [];

  // Load search data
  async function loadSearchData() {
    try {
      const response = await fetch('/api/search-data.json');
      searchData = await response.json();
    } catch (error) {
      // Fallback static data
      searchData = [
        { title: 'Best Forex Brokers', url: '/review/best-forex-brokers/', type: 'page' },
        { title: 'CMA Regulated Brokers', url: '/review/best-forex-brokers/cma-regulated/', type: 'page' },
        { title: 'High Leverage Brokers', url: '/review/best-forex-brokers/high-leverage/', type: 'page' },
        { title: 'M-Pesa Brokers', url: '/review/best-forex-brokers/mpesa/', type: 'page' },
        { title: 'MT4 Brokers', url: '/brokers/platform/metatrader-4', type: 'page' },
        { title: 'Regulators', url: '/regulators', type: 'page' },
        { title: 'Our Experts', url: '/authors/', type: 'page' }
      ];
    }
  }

  function performSearch(query: string) {
    if (!query.trim()) {
      searchResults?.classList.add('hidden');
      return;
    }

    const results = searchData.filter(item => 
      item.title.toLowerCase().includes(query.toLowerCase())
    ).slice(0, 5);

    if (results.length > 0) {
      resultsList!.innerHTML = results.map(item => `
        <a href="${item.url}" class="block p-3 hover:bg-neutral-800 rounded-lg border-b border-neutral-700 last:border-b-0">
          <div class="text-white font-medium">${item.title}</div>
          <div class="text-neutral-400 text-sm capitalize">${item.type}</div>
        </a>
      `).join('');
      searchResults?.classList.remove('hidden');
    } else {
      resultsList!.innerHTML = '<div class="p-3 text-neutral-400">No results found</div>';
      searchResults?.classList.remove('hidden');
    }
  }

  function openSearch() {
    searchDialog?.classList.remove('hidden');
    searchInput?.focus();
    document.body.style.overflow = 'hidden';
  }

  function closeSearchDialog() {
    searchDialog?.classList.add('hidden');
    document.body.style.overflow = '';
    if (searchInput) searchInput.value = '';
    searchResults?.classList.add('hidden');
  }

  // Open search with Ctrl/Cmd + K
  document.addEventListener('keydown', (e) => {
    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
      e.preventDefault();
      openSearch();
    }
    if (e.key === 'Escape') {
      closeSearchDialog();
    }
  });

  searchOverlay?.addEventListener('click', closeSearchDialog);
  closeSearch?.addEventListener('click', closeSearchDialog);

  // Search input handler
  searchInput?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value;
    performSearch(query);
  });

  // Handle Enter key to navigate to first result
  searchInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      const firstResult = resultsList?.querySelector('a');
      if (firstResult) {
        window.location.href = (firstResult as HTMLAnchorElement).href;
      }
    }
  });

  // Load search data when component loads
  loadSearchData();

  // Export function for search button
  if (typeof window !== 'undefined') {
    (window as any).openSearch = openSearch;
  }
</script>