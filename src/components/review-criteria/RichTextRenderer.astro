---
interface Props {
  content: any;
}

const { content } = Astro.props;

function renderText(node: any): string {
  if (!node.text) return '';
  
  let text = node.text;
  
  if (node.format === 1) {
    text = `<strong>${text}</strong>`;
  }
  
  return text;
}

function renderChildren(children: any[]): string {
  return children.map(child => {
    if (child.type === 'text') {
      return renderText(child);
    }
    return '';
  }).join('');
}
---

{content.children.map((node: any) => {
  if (node.type === 'paragraph') {
    return (
      <p set:html={renderChildren(node.children)} />
    );
  }
  
  if (node.type === 'heading') {
    const Tag = node.tag as keyof HTMLElementTagNameMap;
    return (
      <Tag set:html={renderChildren(node.children)} />
    );
  }
  
  if (node.type === 'list') {
    const ListTag = node.tag as keyof HTMLElementTagNameMap;
    return (
      <ListTag>
        {node.children.map((item: any) => (
          <li set:html={renderChildren(item.children)} />
        ))}
      </ListTag>
    );
  }
  
  if (node.type === 'horizontalrule') {
    return <hr class="my-6 border-neutral-700" />;
  }
  
  if (node.type === 'block' && node.fields?.blockType === 'conclusion') {
    return (
      <div class="mt-8 p-6 bg-primary-500/10 border border-primary-500/20 rounded-xl">
        <h3 class="text-lg font-bold text-primary-400 mb-3">{node.fields.title}</h3>
        <div class="text-neutral-300 mb-4">
          <RichTextRenderer content={node.fields.content.root} />
        </div>
        
        {node.fields.keyTakeaways && (
          <div class="mb-4">
            <h4 class="text-sm font-medium text-neutral-400 mb-2">Key Takeaway:</h4>
            {node.fields.keyTakeaways.map((takeaway: any) => (
              <p class="text-sm text-neutral-300">{takeaway.takeaway}</p>
            ))}
          </div>
        )}
        
        {node.fields.nextSteps?.enabled && (
          <div>
            <h4 class="text-sm font-medium text-neutral-400 mb-2">{node.fields.nextSteps.title}</h4>
            {node.fields.nextSteps.actions.map((action: any) => (
              <a 
                href={action.url} 
                class="inline-block text-primary-400 hover:text-primary-300 text-sm underline"
              >
                {action.text}
              </a>
            ))}
          </div>
        )}
      </div>
    );
  }
  
  return null;
})}