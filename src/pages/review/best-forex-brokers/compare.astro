---
import BaseLayout from '~/layouts/BaseLayout.astro';
import Navigation from '~/components/Navigation.astro';
import { getReviews } from '~/lib/qs-esm';
import { site } from '~/data/site';

// Fetch brokers from API
const brokersData = await getReviews();
const brokers = brokersData?.docs || [];

const schemaData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  
  datePublished: new Date('2025-07-01').toISOString(),
  dateModified: new Date().toISOString(),
  lastReviewed: new Date().toISOString(),
  "name": "Forex Broker Comparison - Kenya",
  "description": "Compare the best forex brokers in Kenya side-by-side with detailed analysis of spreads, regulation, features, and costs for Kenyan traders",
  breadcrumb: {
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "Home",
        "item": site.url
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": "Reviews",
        "item": `${site.url}/review/`
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": "Best Forex Brokers",
        "item": `${site.url}/review/best-forex-brokers/`
      },
      {
        "@type": "ListItem",
        "position": 4,
        "name": "Compare",
        "item": `${site.url}/review/best-forex-brokers/compare/`
      }
    ]
  },
  "url": new URL(Astro.request.url).href,
  "mainEntity": {
    "@type": "ItemList",
    "numberOfItems": brokers.length,
    "itemListElement": brokers.map((broker, index) => ({
      "@type": "ListItem",
      "position": index + 1,
      "item": {
        "@type": "Organization",
        "name": broker.brokerName,
        "url": `${site.url}/brokers/${broker.slug}/`,
        "aggregateRating": {
          "@type": "AggregateRating",
          "ratingValue": broker.brokerRating,
          "bestRating": 10
        }
      }
    }))
  }
};
---

<BaseLayout
  title="Forex Broker Comparison - Compare Top Brokers for Kenyan Traders"
  description="Compare forex brokers side-by-side with detailed analysis of spreads, regulation, features, and costs. Make informed decisions with our comprehensive comparison tool."
  schemaData={schemaData}
>
  <Navigation />

  <!-- Header Section -->
  <section class="pt-24 pb-12 bg-gradient-to-br from-neutral-950 via-neutral-900 to-neutral-950">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-display font-bold text-white mb-4">
          Broker
          <span class="bg-gradient-to-r from-primary-400 to-accent-400 bg-clip-text text-transparent">
            Comparison
          </span>
        </h1>
        <p class="text-xl text-neutral-300 max-w-3xl mx-auto">
          Compare forex brokers side-by-side with detailed analysis of spreads, regulation,
          features, and costs. Make informed decisions with our comprehensive comparison tool.
        </p>
      </div>

      <!-- Broker Selector -->
      <div class="bg-neutral-800/50 border border-neutral-700/50 rounded-xl p-6 mb-8">
        <h2 class="text-xl font-bold text-white mb-4">Select Brokers to Compare</h2>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {brokers.slice(0, 12).map((broker) => (
            <label class="flex items-center p-3 bg-neutral-700/30 rounded-lg hover:bg-neutral-700/50 cursor-pointer transition-colors">
              <input type="checkbox" class="mr-3 text-primary-500" data-broker-id={broker.id} />
              <div class="flex items-center gap-2">
                {typeof broker.logo === 'object' && broker.logo?.url ? (
                  <img src={broker.logo.url} alt={broker.brokerName} class="w-6 h-6 object-contain" />
                ) : (
                  <div class="w-6 h-6 bg-primary-500 rounded text-white text-xs flex items-center justify-center">
                    {broker.brokerName.substring(0, 2)}
                  </div>
                )}
                <span class="text-white text-sm">{broker.brokerName}</span>
              </div>
            </label>
          ))}
        </div>
      </div>
    </div>
  </section>

  <!-- Comparison Table -->
  <section class="py-12 bg-gradient-to-b from-neutral-950 to-neutral-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div id="comparison-table" class="hidden">
        <h2 class="text-2xl font-bold text-white mb-6">Broker Comparison</h2>
        <div class="overflow-x-auto">
          <table class="w-full bg-neutral-800/50 border border-neutral-700/50 rounded-xl">
            <thead>
              <tr class="border-b border-neutral-700/50">
                <th class="p-4 text-left text-white font-semibold">Feature</th>
                <th class="p-4 text-center text-white font-semibold min-w-[200px]" data-broker-col="1">Broker 1</th>
                <th class="p-4 text-center text-white font-semibold min-w-[200px]" data-broker-col="2">Broker 2</th>
                <th class="p-4 text-center text-white font-semibold min-w-[200px]" data-broker-col="3">Broker 3</th>
              </tr>
            </thead>
            <tbody id="comparison-body">
              <!-- Dynamic content will be inserted here -->
            </tbody>
          </table>
        </div>
      </div>
      
      <div id="no-selection" class="text-center py-12">
        <p class="text-xl text-neutral-300 mb-4">Select brokers above to start comparing</p>
        <p class="text-neutral-400">Choose 2-3 brokers to see a detailed side-by-side comparison</p>
      </div>
    </div>
  </section>

  <script define:vars={{ brokers }}>
    const selectedBrokers = new Set();
    const maxSelection = 3;
    
    // Handle broker selection
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const brokerId = this.dataset.brokerId;
        
        if (this.checked) {
          if (selectedBrokers.size >= maxSelection) {
            this.checked = false;
            alert(`You can only compare up to ${maxSelection} brokers at once`);
            return;
          }
          selectedBrokers.add(brokerId);
        } else {
          selectedBrokers.delete(brokerId);
        }
        
        updateComparison();
      });
    });
    
    function updateComparison() {
      const comparisonTable = document.getElementById('comparison-table');
      const noSelection = document.getElementById('no-selection');
      
      if (selectedBrokers.size === 0) {
        comparisonTable.classList.add('hidden');
        noSelection.classList.remove('hidden');
        return;
      }
      
      comparisonTable.classList.remove('hidden');
      noSelection.classList.add('hidden');
      
      const selectedBrokerData = Array.from(selectedBrokers).map(id => 
        brokers.find(broker => broker.id === id)
      );
      
      updateComparisonTable(selectedBrokerData);
    }
    
    function updateComparisonTable(selectedBrokerData) {
      const tbody = document.getElementById('comparison-body');
      const headers = document.querySelectorAll('[data-broker-col]');
      
      // Update headers
      headers.forEach((header, index) => {
        if (selectedBrokerData[index]) {
          const broker = selectedBrokerData[index];
          header.innerHTML = `
            <div class="flex flex-col items-center">
              <div class="text-lg font-bold">${broker.brokerName}</div>
              <div class="text-sm text-primary-400">★ ${broker.brokerRating}/10</div>
            </div>
          `;
          header.classList.remove('hidden');
        } else {
          header.classList.add('hidden');
        }
      });
      
      // Comparison rows
      const comparisonRows = [
        { label: 'Overall Rating', key: 'brokerRating', format: (val) => `${val}/10` },
        { label: 'Min Deposit', key: 'minDeposit', format: (val) => val ? `$${val}` : 'N/A' },
        { label: 'Max Leverage', key: 'maxLeverage', format: (val) => val || 'N/A' },
        { label: 'Spread (EUR/USD)', key: 'spread', format: (val) => val ? `${val} pips` : 'N/A' },
        { label: 'CMA Regulated', key: 'cmaRegulated', format: (val) => val ? '✅ Yes' : '❌ No' },
        { label: 'Islamic Account', key: 'islamicAccount', format: (val) => val ? '✅ Yes' : '❌ No' },
        { label: 'M-Pesa Support', key: 'acceptsMpesa', format: (val) => val ? '✅ Yes' : '❌ No' },
        { label: 'Founded', key: 'founded', format: (val) => val || 'N/A' },
        { label: 'Headquarters', key: 'headquarters', format: (val) => val || 'N/A' }
      ];
      
      tbody.innerHTML = comparisonRows.map(row => {
        const cells = selectedBrokerData.map(broker => {
          const value = broker ? broker[row.key] : null;
          return `<td class="p-4 text-center text-neutral-300">${row.format(value)}</td>`;
        }).join('');
        
        return `
          <tr class="border-b border-neutral-700/30">
            <td class="p-4 text-white font-medium">${row.label}</td>
            ${cells}
          </tr>
        `;
      }).join('');
    }
  </script>
</BaseLayout>