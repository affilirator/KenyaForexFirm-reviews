---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navigation from '../../components/Navigation.astro';
import AuthorExpertise from '../../components/authors/AuthorExpertise.astro';
import AuthorCredentials from '../../components/authors/AuthorCredentials.astro';
import AuthorReviewsList from '../../components/authors/AuthorReviewsList.astro';
import AuthorSocial from '../../components/authors/AuthorSocial.astro';
//import RichTextRenderer from '~/components/review-criteria/RichTextRenderer';
import { site } from '../../data/site';
import { getAuthorBySlug, getAuthors } from '../../lib/api-service';
import type { Author } from '../../types/author';
//import { Image } from 'astro:assets';
import RichText from '~/components/common/RichText'
import AuthorHeader from '~/components/authors/AuthorHeader.astro';

export async function getStaticPaths() {
  const authorsData = await getAuthors();
  const authors = authorsData?.docs || [];
  
  return authors.map(author => ({
    params: { slug: author.slug },
    props: { author }
  }));
}

interface Props {
  author: Author;
}

const { author } = Astro.props;

// Sort reviews by brokerRating (highest first)
const sortedReviews = author.reviews?.docs ? [...author.reviews.docs].sort((a, b) => b.brokerRating - a.brokerRating) : [];

// Format author name for meta title
const authorName = author.name;
const authorTitle = author.jobTitle || 'Financial Expert';

// Create schema data for SEO
const schemaData = {
  "@context": "https://schema.org",
  "@type": "ProfilePage",
  "dateCreated": author.createdAt || new Date().toISOString(),
  "dateModified": new Date().toISOString(),
  "mainEntity": {
    "@type": "Person",
    "name": author.name,
    "jobTitle": author.jobTitle,
    "description": author.bio,
    homeLocation: {

    },
    award: {

    },
    "image": author.authorImage?.url,
    "url": new URL(Astro.request.url).href,
    "sameAs": [
      author.socialMediaProfiles?.facebookUrl,
      author.socialMediaProfiles?.twitterUrl,
      author.socialMediaProfiles?.linkedinUrl,
      author.socialMediaProfiles?.youtubeUrl,
      author.socialMediaProfiles?.websiteUrl,

      ...(author.socialMediaProfiles?.otherProfiles?.map(p => p.profileUrl) || [])
    ].filter(Boolean),
    "knowsAbout": author.knowsAbout?.map(item => ({
      "@type": "Thing",
      "name": item.fieldName,
      "description": item.description,
      "url": item.fieldUrl
    })) || [],
    "alumniOf": author.education?.map(edu => ({
      "@type": "EducationalOrganization",
      "name": edu.institution,
      "url": edu.url
    })) || [],
    "worksFor": {
      "@type": "Organization",
      "name": site.organization.name,
      "url": site.organization.url
    },
    "interactionStatistic": [
      {
        "@type": "InteractionCounter",
        "interactionType": "https://schema.org/WriteAction",
        "userInteractionCount": author.reviews?.docs?.length || 0
      }
    ]
  }
};

// Add awards if available
if (author.awards && author.awards.length > 0) {
  schemaData.mainEntity.award = author.awards.map(award => award.name);
}

// Add location if available
if (author.location) {
  schemaData.mainEntity.homeLocation = {
    "@type": "Place",
    "address": {
      "@type": "PostalAddress",
      "addressLocality": author.location.city,
      "addressCountry": author.location.country
    }
  };
}

// Meta title and description
const metaTitle = author.meta?.title || `${authorName} - ${authorTitle}`;
const metaDescription = author.meta?.description || `Learn about ${authorName}, ${authorTitle.toLowerCase()} at ${site.name}. Read expert forex broker reviews and financial insights.`;

---

<BaseLayout
  title={metaTitle}
  description={metaDescription}
  schemaData={schemaData}
  >
  
  
  <AuthorHeader author={author} />

  <section class="dark py-12 bg-gradient-to-b from-neutral-950 to-neutral-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Main Content -->
        <div class="lg:col-span-2">

          <!-- Bio -->
          <div class="bg-neutral-800/50 border border-neutral-700/50 rounded-xl overflow-hidden mb-8">
            
             <!-- Reviews -->
          {sortedReviews.length > 0 && (
            <div class="mb-8">
              <AuthorReviewsList reviews={sortedReviews} />
            </div>
          )}
            <div class="p-6">
              <h2 class="text-xl font-bold text-white mb-4">About {author.name}</h2>
             
              
              
            </div>
            <div class="mt-2 border border-accent/50 max-w-none">
                 <RichText content={author.authorBio} client:visible />
                
              </div>
          </div>
          
         
        </div>
        
        <!-- Sidebar -->
        <div class="space-y-8 lg:sticky lg:top-24 lg:self-start">
          <!-- Expertise -->
          {author.knowsAbout && author.knowsAbout.length > 0 && (
            <AuthorExpertise expertise={author.knowsAbout} />
          )}
          
          <!-- Credentials -->
          <AuthorCredentials 
            education={author.education}
            workHistory={author.workHistory}
            awards={author.awards}
            yearsExperience={author.yearsExperience}
          />
          
          <!-- Social Media -->
          {author.socialMediaProfiles && (
            <AuthorSocial socialMedia={author.socialMediaProfiles} name={author.name} />
          )}
        </div>
      </div>
    </div>
  </section>
  
  <!-- All Reviews Section (if many reviews) -->
  {sortedReviews.length > 6 && (
    <section id="all-reviews" class="py-12 bg-neutral-900">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-2xl font-bold text-white mb-8">All Forex Broker Reviews by {author.name}</h2>
        <AuthorReviewsList reviews={sortedReviews} showAll={true} />
      </div>
    </section>
  )}
</BaseLayout>