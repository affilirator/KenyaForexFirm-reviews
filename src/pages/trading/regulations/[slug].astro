---
import { getRegulators, getRegulatorBySlug } from '~/lib/regulators-api';
import { transformRegulatorData } from '~/lib/regulatorTransformer';
import { generateRegulatorMetadata } from '~/lib/regulatorUtils';
import { getAuthorBySlug } from '~/lib/authors-api';
import type { RegulatorPage, Regulator } from '~/types/regulator';
import Layout from '~/layouts/BaseLayout.astro';
import RegulatorCard from '~/components/regulators/RegCardTwo';
import {
  RegulatorHero,
  RegulatorSection,
  RegulatorFAQ,
  RegulatorConclusion,
  RegulatorRelatedContent,
  RegulatorRequirements,
  RegulatorBenefits,
  RegulatorBrokers,
  TopRegulatedBrokers,
} from '~/components/regulators';
import ErrorDisplay from '~/components/common/ErrorDisplay.astro';

// Generate static paths from regulators API
export async function getStaticPaths() {
  const regulatorsResponse = await getRegulators();
  const regulators = regulatorsResponse.docs || [];

  // Create paths with author data for each regulator
  const paths = await Promise.all(
    regulators.map(async (regulator) => {
      // Get author data if available
      let author = null;
      if (regulator.author && regulator.author.slug) {
        author = await getAuthorBySlug(regulator.author.slug);
      }

      return {
        params: {
          slug:
            regulator.shortName.trim().toLowerCase().replace(/\s+/g, '-') ||
            regulator.slug,
        },
        props: { regulator, author },
      };
    })
  );

  return paths;
}

const { slug } = Astro.params;
const { regulator, author } = Astro.props;

const {
  name,
  shortName,
  description,
  country,
  region,
  established,
  logo,
  trustScore,
  //slug,
} = regulator;

// Transform the data to the format expected by our components
let regulatorData: RegulatorPage | null = null;
let error = null;

try {
  regulatorData = transformRegulatorData(regulator);
} catch (err) {
  error = err;
  console.error(`Error transforming regulator data for ${slug}:`, err);
}

// Set page metadata
const metadata = regulatorData
  ? generateRegulatorMetadata(regulatorData)
  : null;
const pageTitle = metadata?.title || 'Regulator Information';
const pageDescription =
  metadata?.description || 'Learn about this financial regulator';

// Prepare schema markup data
const siteUrl = import.meta.env.SITE || 'https://fx.kenyaforexfirm.com';
const canonicalUrl = `${siteUrl}/trading/regulations/${slug}/`;
const publishDate = regulator?.createdAt
  ? new Date(regulator.createdAt).toISOString()
  : new Date().toISOString();
const modifiedDate = regulator?.updatedAt
  ? new Date(regulator.updatedAt).toISOString()
  : publishDate;
const heroImage =
  regulatorData?.heroSection?.heroImage?.src ||
  `${siteUrl}/images/regulators/default-regulator.jpg`;

// Author information from API
const authorName =
  author?.name || regulator?.author?.name || 'Kenya Forex Firm';
const authorUrl = author
  ? `${siteUrl}/authors/${author.slug}`
  : `${siteUrl}/about-us`;
const authorBio = author?.bio || '';
const authorImage = author?.meta?.image?.url || '';

// Schema markup for Article
const schemaMarkup = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: pageTitle,
  description: pageDescription,
  image: heroImage,
  dateCreated: publishDate,
  datePublished: publishDate,
  dateModified: new Date().toISOString(),
  author: {
    '@type': author ? 'Person' : 'Organization',
    name: authorName,
    url: authorUrl,
    ...(authorBio && { description: authorBio }),
    ...(authorImage && { image: authorImage }),
  },
  publisher: {
    '@type': 'Organization',
  },
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': canonicalUrl,
  },
};
---

<Layout
  title={pageTitle}
  description={pageDescription}
  schemaData={schemaMarkup}
>
  <script src="/src/scripts/regulatorPage.js"></script>
  {
    error && (
      <ErrorDisplay
        title="Error Loading Regulator Data"
        message="We encountered an error while loading the regulator information. Please try again later."
        backLink={{ text: 'View All Regulators', url: '/regulators' }}
      />
    )
  }

  {
    regulatorData && (
      <>
        <RegulatorHero
          heading={regulatorData.heroSection.heading}
          subheading={regulatorData.heroSection.subheading}
          introduction={regulatorData.heroSection.introduction}
          heroImage={regulatorData.heroSection.heroImage}
          showTableOfContents={true}
        />

        {regulatorData.capitalRequirement?.capitalCurrency && (
          <RegulatorRequirements
            sectionTitle={
              regulatorData.capitalRequirement.capitalCurrency || 'USD'
            }
            sectionId="requirements"
            content={regulatorData.capitalRequirement.explanation || ''}
          />
        )}

        {regulatorData.sections.map((section, index) => {
          // Add TopRegulatedBrokers after the first section
          const isFirstSection = index === 0;
          let sectionContent;

          // Check if this is a requirements section
          if (section.sectionId === 'requirements') {
            sectionContent = (
              <RegulatorRequirements
                sectionTitle={section.sectionTitle}
                sectionId={section.sectionId}
                content={section.content}
              />
            );
          }
          // Check if this is a benefits section
          else if (section.sectionId === 'benefits') {
            sectionContent = (
              <RegulatorBenefits
                sectionTitle={section.sectionTitle}
                sectionId={section.sectionId}
                content={section.content}
                benefitsList={section.keyPoints?.map((item) => ({
                  title: item.point.split(':')[0] || item.point,
                  description: {
                    root: {
                      children: [
                        {
                          children: [{ text: item.point.split(':')[1] || '' }],
                          type: 'paragraph',
                        },
                      ],
                      type: 'root',
                    },
                  },
                }))}
              />
            );
          }
          // Default section rendering
          else {
            sectionContent = (
              <RegulatorSection
                sectionTitle={section.sectionTitle}
                sectionId={section.sectionId}
                content={section.content}
                featuredImage={section.featuredImage}
                imagePosition={section.imagePosition}
                keyPoints={section.keyPoints}
              />
            );
          }

          return (
            <>
              {sectionContent}
              {isFirstSection && regulator.website && (
                <TopRegulatedBrokers
                  regulatorWebsite={regulator.website}
                  regulatorName={regulator.shortName}
                  sectionId="top-regulated-brokers"
                />
              )}
            </>
          );
        })}

        {regulatorData.faqSection && (
          <RegulatorFAQ
            sectionTitle={regulatorData.faqSection.sectionTitle}
            sectionId={regulatorData.faqSection.sectionId}
            introduction={regulatorData.faqSection.introduction}
            faqItems={regulatorData.faqSection.faqItems}
          />
        )}

        {regulatorData.conclusionSection && (
          <RegulatorConclusion
            sectionTitle={regulatorData.conclusionSection.sectionTitle}
            sectionId={regulatorData.conclusionSection.sectionId}
            content={regulatorData.conclusionSection.content}
          />
        )}

        {regulatorData.relationships?.regulatedBrokers &&
          regulatorData.relationships.regulatedBrokers.length > 0 && (
            <RegulatorBrokers
              sectionTitle="Regulated Brokers"
              sectionId="regulated-brokers"
              brokers={regulatorData.relationships.regulatedBrokers}
            />
          )}

        {regulatorData.relatedContent &&
          regulatorData.relatedContent.articles.length > 0 && (
            <RegulatorRelatedContent
              sectionTitle={regulatorData.relatedContent.sectionTitle}
              articles={regulatorData.relatedContent.articles}
            />
          )}
      </>
    )
  }
</Layout>
