---
import { getRegulatorData, getAllRegulatorSlugs } from '../../lib/regulatorData';
import { generateRegulatorMetadata } from '../../lib/regulatorUtils';
import type { RegulatorPage } from '../../types/regulator';
import Layout from '../../layouts/BaseLayout.astro';
import { 
  RegulatorHero, 
  RegulatorSection, 
  RegulatorFAQ, 
  RegulatorConclusion, 
  RegulatorRelatedContent,
  RegulatorRequirements,
  RegulatorBenefits,
  RegulatorBrokers
} from '../../components/regulators';
import ErrorDisplay from '../../components/common/ErrorDisplay.astro';

export async function getStaticPaths() {
  const slugs = await getAllRegulatorSlugs();
  return slugs.map(slug => ({ params: { slug } }));
}

const { slug } = Astro.params;

// Fetch the regulator data
let regulatorData: RegulatorPage | null = null;
let error = null;

try {
  regulatorData = await getRegulatorData(slug);
  if (!regulatorData) {
    throw new Error(`Regulator data not found for slug: ${slug}`);
  }
} catch (err) {
  error = err;
  console.error(`Error fetching regulator data for ${slug}:`, err);
}

// Set page metadata
const metadata = regulatorData ? generateRegulatorMetadata(regulatorData) : null;
const pageTitle = metadata?.title || 'Regulator Information';
const pageDescription = metadata?.description || 'Learn about this financial regulator';
---

<Layout title={pageTitle} description={pageDescription}>
  <script src="/src/scripts/regulatorPage.js"></script>
  {error && (
    <ErrorDisplay 
      title="Error Loading Regulator Data"
      message="We encountered an error while loading the regulator information. Please try again later."
      backLink={{ text: "View All Regulators", url: "/regulators" }}
    />
  )}

  {regulatorData && (
    <>
      <!-- Hero Section -->
      <RegulatorHero
        heading={regulatorData.heroSection.heading}
        subheading={regulatorData.heroSection.subheading}
        introduction={regulatorData.heroSection.introduction}
        heroImage={regulatorData.heroSection.heroImage}
        showTableOfContents={true}
      />

      <!-- Main Content Sections -->
      {regulatorData.sections.map((section) => {
        // Check if this is a requirements section
        if (section.sectionId === 'requirements') {
          return (
            <RegulatorRequirements
              sectionTitle={section.sectionTitle}
              sectionId={section.sectionId}
              content={section.content}
              
            />
          );
        }
        
        // Check if this is a benefits section
        if (section.sectionId === 'benefits') {
          return (
            <RegulatorBenefits
              sectionTitle={section.sectionTitle}
              sectionId={section.sectionId}
              content={section.content}
              benefitsList={section.keyPoints?.map(item => ({
                title: item.point.split(':')[0] || item.point,
                description: { root: { children: [{ children: [{ text: item.point.split(':')[1] || '' }], type: 'paragraph' }], type: 'root' } }
              }))}
            />
          );
        }
        
        // Default section rendering
        return (
          <RegulatorSection
            sectionTitle={section.sectionTitle}
            sectionId={section.sectionId}
            content={section.content}
            featuredImage={section.featuredImage}
            imagePosition={section.imagePosition}
            keyPoints={section.keyPoints}
          />
        );
      })}

      <!-- FAQ Section -->
      {regulatorData.faqSection && (
        <RegulatorFAQ
          sectionTitle={regulatorData.faqSection.sectionTitle}
          sectionId={regulatorData.faqSection.sectionId}
          introduction={regulatorData.faqSection.introduction}
          faqItems={regulatorData.faqSection.faqItems}
        />
      )}

      <!-- Conclusion Section -->
      {regulatorData.conclusionSection && (
        <RegulatorConclusion
          sectionTitle={regulatorData.conclusionSection.sectionTitle}
          sectionId={regulatorData.conclusionSection.sectionId}
          content={regulatorData.conclusionSection.content}
        />
      )}

      <!-- Regulated Brokers Section -->
      {regulatorData.relationships?.regulatedBrokers && regulatorData.relationships.regulatedBrokers.length > 0 && (
        <RegulatorBrokers
          sectionTitle="Regulated Brokers"
          sectionId="regulated-brokers"
          brokers={regulatorData.relationships.regulatedBrokers}
        />
      )}

      <!-- Related Content -->
      {regulatorData.relatedContent && regulatorData.relatedContent.articles.length > 0 && (
        <RegulatorRelatedContent
          sectionTitle={regulatorData.relatedContent.sectionTitle}
          articles={regulatorData.relatedContent.articles}
        />
      )}
    </>
  )}
</Layout>