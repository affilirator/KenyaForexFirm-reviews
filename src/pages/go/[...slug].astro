---
//export const prerender = true; // Explicitly tells Astro to pre-render this route

interface Destination {
  url: string;
  weight?: number;
  label?: string;
}

interface CloakedLinkData {
  slug: string; // e.g., "/go/product-name"
  destinationURLs: Destination[];
  trackingData?: Record<string, any>;
  id: string;
  updatedAt: string;
  createdAt: string;
}

// This function runs AT BUILD TIME
export async function getStaticPaths() {
  const PAYLOAD_API_URL = 'https://api.kenyaforexfirm.com' //|| import.meta.env.PAYLOAD_PUBLIC_SERVER_URL; // Ensure this is set in .env

  let allCloakedLinks: CloakedLinkData[] = [];
  try {
    // Fetch ALL cloaked links from your Payload CMS API
    // You might need pagination if you have many links: /api/cloakedLinks?limit=1000
    const apiResponse = await fetch(`${PAYLOAD_API_URL}/api/cloaked-links?limit=1000`);

    if (apiResponse.ok) {
      const data = await apiResponse.json();
      allCloakedLinks = data.docs as CloakedLinkData[];
    } else {
      console.error(`Error fetching cloaked links for getStaticPaths: ${apiResponse.status} ${apiResponse.statusText}`);
    }
  } catch (error) {
    console.error('Error in getStaticPaths while fetching cloaked links:', error);
  }

  // Map each cloaked link to a path object required by getStaticPaths
  // The `params.slug` should match the dynamic segment in your filename `[...slug].astro`
  return allCloakedLinks.map((link) => ({
    params: {
      // Remove the "/go/" prefix if your slug in Payload starts with it,
      // as the Astro route already handles "/go/"
      slug: link.slug.replace(/^\/go\//, ''),
    },
    props: {
      cloakedLink: link, // Pass the entire link object as props
    },
  }));
}

// These props are available at BUILD TIME when Astro renders each static page
const { cloakedLink } = Astro.props;

let redirectUrl: string | null = null;

if (cloakedLink && cloakedLink.destinationURLs && cloakedLink.destinationURLs.length > 0) {
  const destinations = cloakedLink.destinationURLs;

  // --- Logic to select a destination URL (Weighted Redirect Example) ---
  const totalWeight = destinations.reduce((sum, dest) => sum + (dest.weight || 0), 0);

  if (totalWeight === 0) {
    const randomIndex = Math.floor(Math.random() * destinations.length);
    redirectUrl = destinations[randomIndex].url;
  } else {
    let randomNumber = Math.random() * totalWeight;
    for (const dest of destinations) {
      if (randomNumber < (dest.weight || 0)) {
        redirectUrl = dest.url;
        break;
      }
      randomNumber -= (dest.weight || 0);
    }
    if (!redirectUrl) {
        redirectUrl = destinations[0].url;
    }
  }
  // --- End selection logic ---

  // Astro.redirect can be used in getStaticPaths for server-side redirects
  // This is the ideal way to handle "cloaking" during SSG.
  // Astro generates an HTML file that immediately issues a 302 redirect.
  // It's technically not truly static *content* but a static *redirect* file.
  return Astro.redirect(redirectUrl, 302);
} else {
  // Handle cases where cloakedLink or its destinations are missing/empty
  // If getStaticPaths didn't return a path for it, it would already be a 404.
  // This part would only be hit if props.cloakedLink existed but was malformed.
  // For robustness, you might want to return a specific 404 page here.
  Astro.response.status = 404;
  Astro.response.statusText = 'Not Found';
}
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Link Not Found</title>
</head>
<body>
    <h1>404 - Link Not Found</h1>
    <p>The link you are looking for does not exist or has expired.</p>
    <p><a href="/">Go to Homepage</a></p>
</body>
</html>